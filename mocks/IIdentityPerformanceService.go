// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/rarrazaan/be-player-performance-app/internal/dto"
	mock "github.com/stretchr/testify/mock"
)

// IIdentityPerformanceService is an autogenerated mock type for the IIdentityPerformanceService type
type IIdentityPerformanceService struct {
	mock.Mock
}

// CalculatePerformance provides a mock function with given fields: ctx, performance
func (_m *IIdentityPerformanceService) CalculatePerformance(ctx context.Context, performance *dto.PerformanceRequest) *dto.PerformanceResponse {
	ret := _m.Called(ctx, performance)

	if len(ret) == 0 {
		panic("no return value specified for CalculatePerformance")
	}

	var r0 *dto.PerformanceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *dto.PerformanceRequest) *dto.PerformanceResponse); ok {
		r0 = rf(ctx, performance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.PerformanceResponse)
		}
	}

	return r0
}

// Identity provides a mock function with given fields: ctx, performance
func (_m *IIdentityPerformanceService) Identity(ctx context.Context, performance *dto.IdentityRequest) ([]dto.IdentityResponse, error) {
	ret := _m.Called(ctx, performance)

	if len(ret) == 0 {
		panic("no return value specified for Identity")
	}

	var r0 []dto.IdentityResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.IdentityRequest) ([]dto.IdentityResponse, error)); ok {
		return rf(ctx, performance)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.IdentityRequest) []dto.IdentityResponse); ok {
		r0 = rf(ctx, performance)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.IdentityResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.IdentityRequest) error); ok {
		r1 = rf(ctx, performance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIIdentityPerformanceService creates a new instance of IIdentityPerformanceService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIIdentityPerformanceService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IIdentityPerformanceService {
	mock := &IIdentityPerformanceService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
