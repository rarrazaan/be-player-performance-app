// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	utils "github.com/rarrazaan/be-player-performance-app/internal/utils"
	mock "github.com/stretchr/testify/mock"
)

// IJWT is an autogenerated mock type for the IJWT type
type IJWT struct {
	mock.Mock
}

// GenerateAccessToken provides a mock function with given fields: payload
func (_m *IJWT) GenerateAccessToken(payload utils.SignAccessTokenPayload) (*string, error) {
	ret := _m.Called(payload)

	if len(ret) == 0 {
		panic("no return value specified for GenerateAccessToken")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(utils.SignAccessTokenPayload) (*string, error)); ok {
		return rf(payload)
	}
	if rf, ok := ret.Get(0).(func(utils.SignAccessTokenPayload) *string); ok {
		r0 = rf(payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(utils.SignAccessTokenPayload) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIJWT creates a new instance of IJWT. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIJWT(t interface {
	mock.TestingT
	Cleanup(func())
}) *IJWT {
	mock := &IJWT{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
