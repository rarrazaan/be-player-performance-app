// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/rarrazaan/be-player-performance-app/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// IMonoRepository is an autogenerated mock type for the IMonoRepository type
type IMonoRepository struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *IMonoRepository) CreateUser(ctx context.Context, user *model.User) (*model.User, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) (*model.User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.User) *model.User); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserByEmail provides a mock function with given fields: ctx, email
func (_m *IMonoRepository) FindUserByEmail(ctx context.Context, email string) (*model.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByEmail")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserByFirstName provides a mock function with given fields: ctx, firstName
func (_m *IMonoRepository) FindUserByFirstName(ctx context.Context, firstName string) ([]model.UserDetail, error) {
	ret := _m.Called(ctx, firstName)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByFirstName")
	}

	var r0 []model.UserDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]model.UserDetail, error)); ok {
		return rf(ctx, firstName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.UserDetail); ok {
		r0 = rf(ctx, firstName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.UserDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, firstName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIMonoRepository creates a new instance of IMonoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIMonoRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IMonoRepository {
	mock := &IMonoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
