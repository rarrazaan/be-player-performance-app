// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/rarrazaan/be-player-performance-app/internal/dto"
	mock "github.com/stretchr/testify/mock"
)

// IAuthService is an autogenerated mock type for the IAuthService type
type IAuthService struct {
	mock.Mock
}

// LoginWithGoogle provides a mock function with given fields: ctx, googleUser
func (_m *IAuthService) LoginWithGoogle(ctx context.Context, googleUser *dto.GoogleResponse) (*dto.LoginResponsePayload, error) {
	ret := _m.Called(ctx, googleUser)

	if len(ret) == 0 {
		panic("no return value specified for LoginWithGoogle")
	}

	var r0 *dto.LoginResponsePayload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GoogleResponse) (*dto.LoginResponsePayload, error)); ok {
		return rf(ctx, googleUser)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GoogleResponse) *dto.LoginResponsePayload); ok {
		r0 = rf(ctx, googleUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.LoginResponsePayload)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.GoogleResponse) error); ok {
		r1 = rf(ctx, googleUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIAuthService creates a new instance of IAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAuthService {
	mock := &IAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
